apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.amazonaws.appsync'
apply plugin: 'org.jetbrains.dokka'
apply plugin: "org.sonarqube"
apply plugin: 'jacoco'
apply plugin: "org.owasp.dependencycheck"

android {
    compileSdkVersion 30

    defaultConfig {
        minSdkVersion 23
        targetSdkVersion 30
        versionCode 1
        versionName "3.1.7"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArguments clearPackageData: 'true'
    }

    testOptions {
        animationsDisabled = true

        unitTests.all {
            testLogging {
                events "passed", "skipped", "failed", "standardOut", "standardError"
                outputs.upToDateWhen {false}
                showStandardStreams = true
            }
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true
        }
    }

    packagingOptions {
        exclude("META-INF/*.kotlin_module")
    }

    sourceSets {
        main.java.srcDirs += 'src/main/java'
        androidTest {
            resources.srcDirs += ['/var/anonyome_key', '../identity-system-test-config']
            assets.srcDirs += ['../identity-system-test-config']
        }
    }
}

ext {
    coroutine_version = "1.3.7"
    kotlintest_version = "3.3.2"
}

dependencies {
    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutine_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$coroutine_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutine_version"

    // AWS
    implementation 'com.amazonaws:aws-android-sdk-cognitoidentityprovider:[2.16,)'
    implementation 'com.amazonaws:aws-android-sdk-cognitoauth:[2.16,)'
    implementation 'com.amazonaws:aws-android-sdk-core:[2.16,)'
    implementation 'com.amazonaws:aws-android-sdk-appsync:[3.0,)'
    implementation 'com.amazonaws:aws-android-sdk-s3:[2.16,)'
    implementation "com.amazonaws:aws-android-sdk-s3:$aws_version"

    // Sudo Platform
    implementation 'com.sudoplatform:sudouser:8.0.7'
    implementation 'com.sudoplatform:sudokeymanager:[3.4.2,)'
    implementation 'com.sudoplatform:sudologging:[1.0,)'
    implementation 'com.sudoplatform:sudoconfigmanager:[1.2.2,)'
    implementation 'com.sudoplatform:sudoapiclient:[1.4.0,)'

    // Testing
    testImplementation 'junit:junit:4.13'
    testImplementation "io.kotlintest:kotlintest-assertions:$kotlintest_version"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutine_version"
    testImplementation 'org.mockito:mockito-core:3.3.3'
    testImplementation 'com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0'
    testImplementation 'org.powermock:powermock-module-junit4:2.0.7'
    testImplementation 'org.powermock:powermock-api-mockito2:2.0.7'
    testImplementation 'org.json:json:20200518'
    testImplementation 'org.robolectric:robolectric:4.4'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test:rules:1.2.0'
    androidTestImplementation 'androidx.test:monitor:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    androidTestImplementation 'com.google.android.gms:play-services-safetynet:17.0.0'
    androidTestImplementation 'com.google.android.gms:play-services-base:17.3.0'
}

task jacocoTestReport(type: JacocoReport, dependsOn: "testDebugUnitTest") {
    group = "Reporting"
    description = "Generate Jacoco coverage reports"

    classDirectories.from = fileTree(
            dir: "${buildDir}/tmp/kotlin-classes/debug",
            excludes: ['**/R.class',
                       '**/R$*.class',
                       '**/BuildConfig.*',
                       '**/Manifest*.*']
    )

    sourceDirectories.from = files("${buildDir.parent}/sudoprofiles/src/main/java")
    executionData.from = files("${buildDir}/jacoco/testDebugUnitTest.exec")

    reports {
        xml.enabled = true
        html.enabled = true
    }
}

task sourcesJar(type: Jar) {
    archiveClassifier = "sources"
    from android.sourceSets.main.java.srcDirs
}

artifacts {
    archives sourcesJar
}

// Dokka documentation generation
apply plugin: 'org.jetbrains.dokka'

dokkaHtml {
    outputDirectory.set(project.file("$buildDir/javadoc"))
    dokkaSourceSets {
        configureEach {
            jdkVersion.set(8)
            skipEmptyPackages.set(true)
        }
    }
}

// Returns a list of `configurations` which should not be scanned for vulnerabilities
def getConfigurationsToSkip = { configs ->
    configs.findAll {
        it.name.startsWithAny("androidTest", "test", "lint") ||
                it.name.contains("AndroidTest") ||
                it.name.contains("UnitTest")
    }.collect {
        it.name
    }
}

tasks.register("printConfigurationsToSkip") {
    group = "OWASP dependency-check"
    description = "Print the configurations which are skipped when scanning for vulnerable dependencies"
    doLast {
        println "Configurations to skip when scanning for vulnerable dependencies:"
        println getConfigurationsToSkip(configurations).join("\n")
    }
}

afterEvaluate {
    // NOTE: this must be within `afterEvaluate` to ensure all the configurations have been created before filtering them
    dependencyCheck {
        suppressionFile file("../dependency-suppression.xml").toString()
        failBuildOnCVSS 0
        skipConfigurations = getConfigurationsToSkip(configurations)
    }
}


// https://github.com/cookpad/license-tools-plugin
apply plugin: "com.cookpad.android.licensetools"
licenseTools {
    licensesYaml = file("licenses.yml")
    ignoredGroups = ["com.nhaarman:mockito-kotlin", "com.anonyome", "com.sudoplatform"]
    ignoredProjects = ["org.mockito"]
}

@Grab('org.yaml:snakeyaml:1.17') // Yaml parser
import org.yaml.snakeyaml.Yaml

task checkLicenseHaveRequiredFields {
    description = "Check every license entry has the mandatory fields"
    group = "verification"
    doLast {
        def mandatoryFields = ["artifact", "name", "copyrightHolder", "url"]
        Yaml parser = new Yaml()
        def licenses = parser.load((file("licenses.yml") as File).text)
        def errors = new StringBuilder()
        licenses.each { artifact ->
            mandatoryFields.each { field ->
                if (artifact[field] == null) {
                    errors.append("License entry '${artifact.artifact}' is missing required element `$field`\n")
                }
            }
            if (artifact["license"] == null && artifact["licenseUrl" == null]) {
                errors.append("License entry '${artifact.artifact}' must have one of [license,licenseUrl]\n")
            }
        }
        if (errors.length() > 0) {
            throw new GradleException("Missing license elements:\n$errors")
        }
    }
}
checkLicenses.finalizedBy checkLicenseHaveRequiredFields

apply plugin: 'maven'

def props = new Properties()
file("../secret.properties").withInputStream { props.load(it) }

// Setup common publishing variables
ext {
    projectGroup = 'com.sudoplatform'
    projectArtifact = project.name
    projectDescription = 'Profiles SDK for the Sudo Platform by Anonyome Labs.'
    projectUrl = 'https://github.com/sudoplatform/sudo-profiles-android'
    projectSCM = 'scm:git:github.com/sudoplatform/sudo-profiles-android.git'
    if (project.findProperty("tag")) {
        projectVersion = "$tag"
    } else {
        projectVersion = project.android.defaultConfig.versionName
    }
}

if(project.findProperty("tag") &&
        project.file("${rootProject.projectDir}/util/publish-mavencentral.gradle").exists()) {
    apply from: "${rootProject.projectDir}/util/publish-mavencentral.gradle"
}
else if (project.file("${rootProject.projectDir}/util/publish-internal-android.gradle").exists()) {
    apply from: "${rootProject.projectDir}/util/publish-internal-android.gradle"
}
